{
  "name": "ragnarok",
  "displayName": "RAGnar≈çk - Local RAG for Copilot",
  "description": "Retrieval-Augmented Generation extension for VSCode with local sentence transformers and semantic chunking",
  "version": "0.0.3",
  "publisher": "hyorman",
  "icon": "assets/icon.png",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/hyorman/ragnarok"
  },
  "engines": {
    "vscode": "^1.105.0"
  },
  "categories": [
    "Machine Learning",
    "AI",
    "Chat",
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/src/extension.js",
  "contributes": {
    "configuration": {
      "title": "RAGnar≈çk",
      "properties": {
        "ragnarok.embeddingModel": {
          "type": "string",
          "default": "Xenova/all-MiniLM-L6-v2",
          "description": "Sentence transformer model to use for embeddings",
          "enum": [
            "Xenova/all-MiniLM-L6-v2",
            "Xenova/all-MiniLM-L12-v2",
            "Xenova/paraphrase-MiniLM-L6-v2",
            "Xenova/multi-qa-MiniLM-L6-cos-v1"
          ]
        },
        "ragnarok.topK": {
          "type": "number",
          "default": 5,
          "description": "Number of top results to return from RAG queries",
          "minimum": 1,
          "maximum": 20
        },
        "ragnarok.chunkSize": {
          "type": "number",
          "default": 512,
          "description": "Maximum size of text chunks for embedding (in characters)",
          "minimum": 100,
          "maximum": 2000
        },
        "ragnarok.chunkOverlap": {
          "type": "number",
          "default": 50,
          "description": "Overlap between chunks (in characters)",
          "minimum": 0,
          "maximum": 500
        },
        "ragnarok.pdfStructureDetection": {
          "type": "string",
          "default": "heuristic",
          "description": "How to detect structure in PDF files",
          "enum": [
            "heuristic",
            "none"
          ],
          "enumDescriptions": [
            "Try to detect headings using heuristics (may be inaccurate)",
            "Don't detect structure, use plain text chunking"
          ]
        },
        "ragnarok.useAgenticMode": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**Enable Agentic RAG:** Multi-step retrieval with query planning, iterative refinement, and result evaluation. When disabled, uses simple single-shot retrieval.\n\nüìö [Learn more about Agentic RAG](https://github.com/hyorman/ragnarok#agentic-rag)",
          "order": 10
        },
        "ragnarok.agenticMaxIterations": {
          "type": "number",
          "default": 3,
          "markdownDescription": "Maximum retrieval iterations in agentic mode. Higher = more thorough but slower.\n\n‚ö†Ô∏è _Only applies when Agentic Mode is enabled_",
          "minimum": 1,
          "maximum": 10,
          "order": 11
        },
        "ragnarok.agenticConfidenceThreshold": {
          "type": "number",
          "default": 0.7,
          "markdownDescription": "Confidence threshold (0-1) to stop retrieval. Lower = more iterations, higher = stops earlier.\n\n‚ö†Ô∏è _Only applies when Agentic Mode is enabled_",
          "minimum": 0,
          "maximum": 1,
          "order": 12
        },
        "ragnarok.agenticQueryDecomposition": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Decompose complex queries into sub-queries. Recommended for comparisons and multi-part questions.\n\n‚ö†Ô∏è _Only applies when Agentic Mode is enabled_",
          "order": 13
        },
        "ragnarok.agenticIterativeRefinement": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Generate follow-up queries to fill information gaps detected during retrieval.\n\n‚ö†Ô∏è _Only applies when Agentic Mode is enabled_",
          "order": 14
        },
        "ragnarok.agenticRetrievalStrategy": {
          "type": "string",
          "default": "hybrid",
          "markdownDescription": "Search strategy for agentic mode:\n- **hybrid** (recommended): 70% semantic + 30% keyword\n- **vector**: Pure semantic similarity\n\n‚ö†Ô∏è _Only applies when Agentic Mode is enabled_",
          "enum": [
            "vector",
            "hybrid"
          ],
          "enumDescriptions": [
            "Pure semantic search using embeddings only",
            "Hybrid: Combines semantic + keyword matching (recommended)"
          ],
          "order": 15
        },
        "ragnarok.agenticUseLLM": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**Use LLM (Copilot) for intelligent planning:** Uses Copilot for query decomposition and result evaluation instead of rule-based heuristics.\n\n**Requirements:**\n- ‚úÖ GitHub Copilot subscription\n- ‚úÖ GitHub Copilot extension\n\n**Trade-offs:**\n- ‚úÖ Much more intelligent\n- ‚úÖ Context-aware planning\n- ‚ö†Ô∏è 2-3x slower\n- ‚ö†Ô∏è Uses Copilot API quota\n\n‚ö†Ô∏è _Only applies when Agentic Mode is enabled_",
          "order": 16
        },
        "ragnarok.agenticLLMModel": {
          "type": "string",
          "default": "gpt-4o",
          "markdownDescription": "**LLM model to use** for query planning and evaluation:\n\n- **gpt-4o** (default): Most intelligent, best reasoning\n- **gpt-4o-mini**: Faster, cheaper, still very capable\n- **gpt-3.5-turbo**: Fastest, most economical\n\n**Performance:**\n- gpt-4o: Best quality, slower, more tokens\n- gpt-4o-mini: Good balance\n- gpt-3.5-turbo: Fast, lower quality\n\n‚ö†Ô∏è _Only applies when LLM Mode is enabled_",
          "enum": [
            "gpt-4o",
            "gpt-4o-mini",
            "gpt-3.5-turbo"
          ],
          "enumDescriptions": [
            "GPT-4o: Most intelligent, best for complex reasoning (slower, more expensive)",
            "GPT-4o-mini: Balanced performance and cost (recommended for most uses)",
            "GPT-3.5 Turbo: Fastest and most economical (lower quality reasoning)"
          ],
          "order": 17
        },
        "ragnarok.agenticIncludeWorkspaceContext": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Include workspace context:** Pass selected code, active file, imports, and symbols to Copilot (like #codebase).\n\n**Includes:**\n- Selected code (max 1000 chars)\n- File imports and symbols\n- Workspace name\n\n**Privacy:** Only relative paths, no sensitive data\n\n‚ö†Ô∏è _Only applies when LLM Mode is enabled_",
          "order": 18
        }
      }
    },
    "commands": [
      {
        "command": "ragnarok.createTopic",
        "title": "Create New Topic",
        "category": "RAG",
        "icon": "$(add)"
      },
      {
        "command": "ragnarok.deleteTopic",
        "title": "Delete Topic",
        "category": "RAG",
        "icon": "$(trash)"
      },
      {
        "command": "ragnarok.listTopics",
        "title": "List All Topics",
        "category": "RAG"
      },
      {
        "command": "ragnarok.addDocument",
        "title": "Add Document to Topic",
        "category": "RAG",
        "icon": "$(file-directory-create)"
      },
      {
        "command": "ragnarok.refreshTopics",
        "title": "Refresh Topics",
        "category": "RAG",
        "icon": "$(refresh)"
      },
      {
        "command": "ragnarok.clearModelCache",
        "title": "Clear Model Cache",
        "category": "RAG"
      },
      {
        "command": "ragnarok.clearDatabase",
        "title": "Clear Database",
        "category": "RAG"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ragnarok",
          "title": "RAG Topics",
          "icon": "$(database)"
        }
      ]
    },
    "views": {
      "ragnarok": [
        {
          "id": "ragTopics",
          "name": "Topics",
          "icon": "$(files)"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "ragTopics",
        "contents": "No topics yet. Create your first topic to start using RAG!\n[Create Topic](command:ragnarok.createTopic)\nTopics help organize your documents for semantic search and retrieval-augmented generation with Copilot."
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "ragnarok.createTopic",
          "when": "view == ragTopics",
          "group": "navigation@1"
        },
        {
          "command": "ragnarok.refreshTopics",
          "when": "view == ragTopics",
          "group": "navigation@2"
        }
      ],
      "view/item/context": [
        {
          "command": "ragnarok.addDocument",
          "when": "view == ragTopics && viewItem == topic",
          "group": "inline@1"
        },
        {
          "command": "ragnarok.deleteTopic",
          "when": "view == ragTopics && viewItem == topic",
          "group": "inline@2"
        }
      ]
    },
    "languageModelTools": [
      {
        "name": "ragQuery",
        "tags": [
          "documentation",
          "search",
          "copilot",
          "context",
          "rag"
        ],
        "toolReferenceName": "ragQuery",
        "displayName": "RAG Query",
        "modelDescription": "Use this tool when the user asks questions about topics they have added to the RAG system. Supports both simple single-shot retrieval and advanced agentic RAG with multi-step query planning, iterative refinement, and intelligent result evaluation. The tool intelligently matches the requested topic: it first tries an exact match, then finds the most semantically similar topic if no exact match exists. In agentic mode, complex queries are automatically decomposed into sub-queries for comprehensive information gathering. Always check the 'topicMatched' field and 'agenticMetadata' in the response.",
        "icon": "$(database)",
        "canBeReferencedInPrompt": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "topic": {
              "type": "string",
              "description": "The name of the topic to search within (e.g., 'React Documentation', 'Company Policy'). If exact match is not found, the most semantically similar topic will be automatically selected."
            },
            "query": {
              "type": "string",
              "description": "The search query or question to find relevant information"
            },
            "topK": {
              "type": "number",
              "description": "Number of top results to return (optional, defaults to configured value)",
              "default": 5
            },
            "useAgenticMode": {
              "type": "boolean",
              "description": "Enable agentic RAG with multi-step query planning and iterative retrieval (optional, defaults to extension settings)"
            },
            "agenticConfig": {
              "type": "object",
              "description": "Configuration for agentic RAG behavior (optional)",
              "properties": {
                "maxIterations": {
                  "type": "number",
                  "description": "Maximum retrieval iterations (1-10)"
                },
                "confidenceThreshold": {
                  "type": "number",
                  "description": "Minimum confidence to stop retrieval (0-1)"
                },
                "enableQueryDecomposition": {
                  "type": "boolean",
                  "description": "Decompose complex queries into sub-queries"
                },
                "enableIterativeRefinement": {
                  "type": "boolean",
                  "description": "Enable follow-up queries based on gaps"
                },
                "retrievalStrategy": {
                  "type": "string",
                  "enum": ["vector", "hybrid"],
                  "description": "Search strategy: 'vector' (semantic) or 'hybrid' (semantic + keyword)"
                },
                "useLLM": {
                  "type": "boolean",
                  "description": "Use LLM for intelligent query planning and evaluation (requires Copilot, slower but more intelligent)"
                }
              }
            }
          },
          "required": [
            "topic",
            "query"
          ]
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "compile:tests": "tsc -p ./tsconfig.test.json",
    "watch": "tsc -watch -p ./",
    "watch:tests": "tsc -watch -p ./tsconfig.test.json",
    "lint": "eslint src --ext ts",
    "package": "vsce package --allow-package-all-secrets --allow-package-env-file",
    "test": "npm run compile && node ./out/test/runTests.js",
    "test:unit": "mocha --require ts-node/register 'test/**/*.test.ts' --timeout 120000",
    "test:compiled": "npm run compile && npm run compile:tests && mocha 'out/test/test/**/*.test.js' --timeout 120000",
    "inspect:chunks": "npm run compile && node scripts/inspect-chunks.js",
    "clean": "rimraf out",
    "clean:test": "rimraf out/test"
  },
  "devDependencies": {
    "@types/chai": "^4.3.11",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.10.0",
    "@types/pdf-parse": "^1.1.5",
    "@types/turndown": "^5.0.5",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "@vscode/test-electron": "^2.3.8",
    "@vscode/vsce": "^3.6.2",
    "chai": "^4.4.1",
    "eslint": "^9.15.0",
    "mocha": "^11.0.0",
    "rimraf": "^6.0.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.2"
  },
  "dependencies": {
    "@huggingface/transformers": "^3.7.6",
    "pdf-parse": "^1.1.1",
    "turndown": "^7.1.2"
  }
}
